basePath: /
definitions:
  api.AccountDetails:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      postcode:
        type: string
    type: object
  api.ApiErrorResponse:
    properties:
      error:
        type: string
      msg:
        type: string
    type: object
  api.OrderApiResponse:
    properties:
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/utils.OrderItem'
        type: array
      shippingDetails:
        $ref: '#/definitions/utils.ShippingDetails'
      total:
        type: integer
      updatedDate:
        type: string
    type: object
  api.OrderRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/utils.OrderItem'
        type: array
      paymentToken:
        type: string
      shippingDetails:
        $ref: '#/definitions/utils.ShippingDetails'
    type: object
  api.UserDetails:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  utils.AccountApiResponse:
    properties:
      address:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      postcode:
        type: string
    type: object
  utils.Basket:
    properties:
      items:
        items:
          $ref: '#/definitions/utils.OrderItem'
        type: array
      total:
        type: integer
    type: object
  utils.OrderItem:
    properties:
      productId:
        type: integer
      quantity:
        type: integer
    type: object
  utils.Product:
    properties:
      categoryId:
        type: integer
      id:
        type: integer
      longDescription:
        type: string
      price:
        type: integer
      quantityRemaining:
        type: integer
      shortDescription:
        type: string
    type: object
  utils.ProductCategory:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  utils.ShippingDetails:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      postcode:
        type: string
    type: object
host: localhost:4001
info:
  contact: {}
  description: Simple store for teaching and learning
  title: BJSS Store
  version: "1.0"
paths:
  /api/account:
    get:
      consumes:
      - application/json
      operationId: GetAccount
      produces:
      - application/json
      responses:
        "200":
          description: The user's account
          schema:
            $ref: '#/definitions/utils.AccountApiResponse'
        "401":
          description: User is not signed in
          schema:
            $ref: '#/definitions/api.ApiErrorResponse'
      summary: Gets the user's Account
    post:
      consumes:
      - application/json
      operationId: PostAccount
      parameters:
      - description: account information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.AccountDetails'
      produces:
      - application/json
      responses:
        "200":
          description: The user's account
          schema:
            $ref: '#/definitions/utils.AccountApiResponse'
        "401":
          description: User is not signed in
          schema:
            $ref: '#/definitions/api.ApiErrorResponse'
      summary: Updates the users account
  /api/account/sign-in:
    post:
      consumes:
      - application/json
      description: Signs in, deletes any existing session, creates a new one for this
        user.
      operationId: PostSignIn
      parameters:
      - description: account information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.UserDetails'
      produces:
      - application/json
      responses:
        "200":
          description: The user's account
          schema:
            $ref: '#/definitions/utils.AccountApiResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/api.ApiErrorResponse'
      summary: Signs in
  /api/account/sign-up:
    post:
      consumes:
      - application/json
      description: Signs up, deletes any existing session, creates a new one for this
        user. Will give an error if the user already exists.
      operationId: PostSignUp
      parameters:
      - description: account information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.AccountDetails'
      produces:
      - application/json
      responses:
        "200":
          description: The user's account
          schema:
            $ref: '#/definitions/utils.AccountApiResponse'
        "400":
          description: Malformed request or account already exists
          schema:
            $ref: '#/definitions/api.ApiErrorResponse'
      summary: Registers a new user
  /api/order/{token}:
    get:
      consumes:
      - application/json
      description: Does not require a signed in user so that we can implement getting
        an order via a link in an email, etc.
      operationId: GetOrder
      parameters:
      - description: Order token. Currently same as order.id
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The newly created order
          schema:
            $ref: '#/definitions/api.OrderApiResponse'
        "404":
          description: No such order
          schema:
            $ref: '#/definitions/api.ApiErrorResponse'
      summary: Fetches an order given a token
  /api/order/basket:
    get:
      description: The same session cookie that created the basket is needed
      operationId: GetBasket
      produces:
      - application/json
      responses:
        "200":
          description: A Basket
          schema:
            $ref: '#/definitions/utils.Basket'
      summary: Gets the user's Basket
    post:
      consumes:
      - application/json
      description: Sets a session cookie which is needed to later get the basket
      operationId: PostBasket
      parameters:
      - description: A Basket
        in: body
        name: Basket
        required: true
        schema:
          $ref: '#/definitions/utils.Basket'
      produces:
      - application/json
      responses:
        "200":
          description: A Basket
          schema:
            $ref: '#/definitions/utils.Basket'
      summary: Creates or updates the user's Basket
  /api/order/checkout:
    post:
      consumes:
      - application/json
      description: Checks the stock levels and paymentToken. If Ok creates a new order.
        If not gives an error and the products there is not enough stock for. Sets
        a session cookie which can be used later to tie this order to a signed in
        user. Does not require a signed in user so guests can check out
      operationId: PostCheckout
      parameters:
      - description: An order
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/api.OrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: The newly created order
          schema:
            $ref: '#/definitions/api.OrderApiResponse'
        "400":
          description: An error. If the request was well formed this will be payment
            or stock level error. If stock level error, the quantityRemaining is returned
            for products with not enough stock.
          schema:
            $ref: '#/definitions/api.ApiErrorResponse'
      summary: Creates a new order
  /api/order/history:
    get:
      operationId: GetHistory
      produces:
      - application/json
      responses:
        "200":
          description: A Basket
          schema:
            $ref: '#/definitions/utils.Basket'
      summary: Gets the user's Order history
  /api/product/catalogue:
    get:
      operationId: Search
      parameters:
      - description: Text to search for
        in: query
        name: search
        type: string
      - description: A Category Id to filter Products on
        in: query
        name: caregory
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: A JSON array of Products
          schema:
            items:
              $ref: '#/definitions/utils.Product'
            type: array
      summary: Query or get all Products
  /api/product/categories:
    get:
      description: Signs up, deletes any existing session, creates a new one for this
        user. Will give an error if the user already exists.
      operationId: Categories
      produces:
      - application/json
      responses:
        "200":
          description: A JSON array of Categories
          schema:
            items:
              $ref: '#/definitions/utils.ProductCategory'
            type: array
      summary: Get a list of product Categories
  /api/product/deals:
    get:
      operationId: Deals
      produces:
      - application/json
      responses:
        "200":
          description: A JSON array of Products
          schema:
            items:
              $ref: '#/definitions/utils.Product'
            type: array
      summary: Get deals that are valid for today
swagger: "2.0"
